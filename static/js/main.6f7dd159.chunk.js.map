{"version":3,"sources":["useFetch.js","App.js","reportWebVitals.js","index.js"],"names":["useFetch","url","useState","data","setData","isPending","setIsPending","error","setError","useEffect","fetch","then","res","ok","Error","json","console","log","dataObj","labels","map","date","slice","datasets","label","weekIncidence","toFixed","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","pointRadius","catch","err","message","App","className","options","title","display","text","scales","yAxes","ticks","min","max","stepSize","xAxes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA8CeA,EA5CE,SAACC,GAAS,IAAD,EACAC,mBAAS,MADT,mBACjBC,EADiB,KACXC,EADW,OAEUF,oBAAS,GAFnB,mBAEjBG,EAFiB,KAENC,EAFM,OAGEJ,mBAAS,MAHX,mBAGjBK,EAHiB,KAGVC,EAHU,KAyCxB,OApCAC,qBAAU,WACRC,MAAMT,GACHU,MAAK,SAACC,GACL,IAAKA,EAAIC,GACP,MAAMC,MAAM,wBAEd,OAAOF,EAAIG,UAEZJ,MAAK,SAACR,GACLa,QAAQC,IAAId,GACZ,IAAMe,EAAU,CACdC,OAAQhB,EAAKA,KAAKiB,KAAI,qBAAGC,KAAgBC,MAAM,EAAG,OAClDC,SAAU,CACR,CACEC,MAAO,YACPrB,KAAMA,EAAKA,KAAKiB,KAAI,qBAAGK,cACPC,QAAQ,MAExBC,YAAa,CAAC,oBACdC,gBAAiB,CAAC,yBAClBC,qBAAsB,qBACtBC,iBAAkB,qBAClBC,YAAa,MAInBzB,GAAa,GACbF,EAAQc,GACRV,EAAS,SAEVwB,OAAM,SAACC,GACN3B,GAAa,GACbE,EAASyB,EAAIC,cAEhB,CAACjC,IAEG,CAAEE,OAAME,YAAWE,U,OCIb4B,MA3Cf,WAAgB,IAAD,EACsBnC,EACjC,2DADMO,EADK,EACLA,MAAOF,EADF,EACEA,UAAWF,EADb,EACaA,KA+B1B,OACE,qBAAKiC,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACG7B,GAAS,8BAAMA,IACfF,GAAa,6CACbF,GAAQ,cAAC,IAAD,CAAMA,KAAMA,EAAMkC,QAhCjB,CACdC,MAAO,CACLC,SAAS,EACTC,KAAM,cAERC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,IAAK,EACLC,IAAK,GACLC,SAAU,KAIhBC,MAAO,CACL,CACEJ,MAAO,CACLC,IAAK,EACLC,IAAK,GACLC,SAAU,gBCjBPE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6f7dd159.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw Error(\"fetching data failed\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        const dataObj = {\r\n          labels: data.data.map(({ date }) => date.slice(0, 10)),\r\n          datasets: [\r\n            {\r\n              label: \"Incidence\",\r\n              data: data.data.map(({ weekIncidence }) =>\r\n                weekIncidence.toFixed(1)\r\n              ),\r\n              borderColor: [\"rgba(0, 0, 0, 1)\"],\r\n              backgroundColor: [\"rgba(0, 206, 86, 0.3)\"],\r\n              pointBackgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n              pointBorderColor: \"rgba(0, 0, 0, 0.8)\",\r\n              pointRadius: 0.5,\r\n            },\r\n          ],\r\n        };\r\n        setIsPending(false);\r\n        setData(dataObj);\r\n        setError(null);\r\n      })\r\n      .catch((err) => {\r\n        setIsPending(false);\r\n        setError(err.message);\r\n      });\r\n  }, [url]);\r\n\r\n  return { data, isPending, error };\r\n};\r\n\r\nexport default useFetch;\r\n","import \"./App.css\";\nimport { Line } from \"react-chartjs-2\";\nimport useFetch from \"./useFetch\";\n\nfunction App() {\n  const { error, isPending, data } = useFetch(\n    \"https://api.corona-zahlen.org/germany/history/incidence\"\n  );\n\n  const options = {\n    title: {\n      display: true,\n      text: \"Line Chart\",\n    },\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            min: 0,\n            max: 10,\n            stepSize: 1,\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            min: 0,\n            max: 50,\n            stepSize: 10,\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"chart\">\n        {error && <div>{error}</div>}\n        {isPending && <div>Loading...</div>}\n        {data && <Line data={data} options={options} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}